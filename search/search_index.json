{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#workflow-project","title":"Workflow Project","text":"<pre><code>flowchart LR\n    subgraph pipeline[Pipeline]\n        A[Multiples Excel Files] --&gt;|Extract| B[extract_from_excel]\n        B[extract_from_excel] --&gt;|Transform| C[Generate list Dataframes]\n        C[Generate list Dataframes] --&gt;|Load| D[Consolidate Result]\n    end</code></pre>"},{"location":"#functions","title":"Functions","text":"<p>Read files and convert to dataframe. agrs: input_path(str): Path folder files return: list dataframes</p> Source code in <code>app/pipeline/extract.py</code> <pre><code>def extract_from_excel(path_files: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Read files and convert to dataframe.\n    agrs: input_path(str): Path folder files\n    return: list dataframes\n    \"\"\"\n    list_files = glob.glob(os.path.join(path_files, '*.xlsx'))\n\n    list_dataframes = list()\n    for file in list_files:\n        list_dataframes.append(pd.read_excel(file))\n\n    return list_dataframes\n</code></pre> <p>Concatenate list dataframes args:     list_dataframes(List[pd.DataFrame]): List Dataframes</p> Source code in <code>app/pipeline/transform.py</code> <pre><code>def concatenate_dataframes(\n    list_dataframes: List[pd.DataFrame],\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Concatenate list dataframes\n    args:\n        list_dataframes(List[pd.DataFrame]): List Dataframes\n    \"\"\"\n    return pd.concat(list_dataframes, ignore_index=True)\n</code></pre> <p>Save dataframe to excel args:     dataframe(pd.dataframe): Dataframe to save     path_save(str): Path save     file_name(str): File Name</p> Source code in <code>app/pipeline/load.py</code> <pre><code>def save_dataframe(dataframe: pd.DataFrame, path_save: str, file_name: str):\n    \"\"\"\n    Save dataframe to excel\n    args:\n        dataframe(pd.dataframe): Dataframe to save\n        path_save(str): Path save\n        file_name(str): File Name\n    \"\"\"\n    if not os.path.exists(path_save):\n        os.makedirs(path_save)\n\n    dataframe.to_excel(f'{path_save}/{file_name}.xlsx', index=False)\n    return 'Load Success'\n</code></pre>"}]}